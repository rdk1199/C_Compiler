#include "C_Grammar.h"
#include "C_Grammar_Macros.h"

using std::set;
using std::multimap;
using std::vector;

set<int> C_terminals = {

 __IDENTIFIER__ , __TYPE_IDENTIFIER__, __INT_CONST__, __FP_CONST__ /*,__ENUMERATION_CONSTANT__*/ , __CHAR_CONST__ , __STRING_LITERAL__ , __LEFT_BRACKET__ , __RIGHT_BRACKET__ , __LEFT_PAREN__ , __RIGHT_PAREN__ ,
 __LEFT_BRACE__ , __RIGHT_BRACE__ , __PERIOD__ , __ARROW__ , __PLUS_PLUS__ , __MINUS_MINUS__ , __QUESTION_MARK__ , __COLON__ , __OR__ ,
 __AND_AND__ , __INCLUSIVE_OR__ , __EXCLUSIVE_OR__ , __AND__ , __EQUAL_EQUAL__, __NOT_EQUAL__ ,__LESS_THAN__ , __GREATER_THAN__ ,
 __LEQ__ , __GEQ__, __LEFT_SHIFT__ , __RIGHT_SHIFT__ , __PLUS__ , __MINUS__ , __ASTERISK__ , __SLASH__ ,
 __PERCENT__ , __TILDE__ , __NOT__ , __SEMICOLON__ , __ELLIPSIS__ , __EQUAL__ ,
 __ASTERISK_EQUAL__ , __SLASH_EQUAL__, __PERCENT_EQUAL__ , __PLUS_EQUAL__ , __MINUS_EQUAL__ , __SHIFT_LEFT_EQUAL__ , __SHIFT_RIGHT_EQUAL__ , __AND_EQUAL__,
 __CARET_EQUAL__ , __BAR_EQUAL__ , __COMMA__ , __HASHTAG__ , __HASHTAG_HASHTAG__, __AUTO__ , __BREAK__, __CASE__ ,
 __CHAR__, __CONST__ , __CONTINUE__ , __DEFAULT__ , __DO__, __DOUBLE__, __ELSE__ , __ENUM__,
 __EXTERN__ , __FLOAT__ , __FOR__, __GOTO__ , __IF__ , __INLINE__ , __INT__, __LONG__ ,
 __REGISTER__, __RESTRICT__ , __RETURN__, __SHORT__ , __SIGNED__ , __SIZEOF__ , __STATIC__ , __STRUCT__ ,
 __SWITCH__ , __TYPEDEF__, __UNION__ , __UNSIGNED__ , __VOID__ , __VOLATILE__, __WHILE__, __ALIGN_AS__,
 __ALIGN_OF__ , __ATOMIC__, __BOOL__ , __COMPLEX__,  __GENERIC__ , __IMAG__, __NO_RETURN__, __STATIC_ASSERT__ , __THREAD_LOCAL__ 

};

set<int> C_nonterminals = {

 __PRIMARY_EXPRESSION__, __EXPRESSION__ , __GENERIC_SELECTION__ , __CONSTANT__, __ASSIGNMENT_EXPRESSION__, __GENERIC_ASSOC_LIST__ , __GENERIC_ASSOCIATION__,
 __TYPE_NAME__ , __POSTFIX_EXPRESSION__ , __ARGUMENT_EXPRESSION_LIST__ , __INITIALIZER_LIST__ , __UNARY_EXPRESSION__, __UNARY_OPERATOR__ , __CAST_EXPRESSION__ , __MULTIPLICATIVE_EXPRESSION__ ,
 __ADDITIVE_EXPRESSION__ , __SHIFT_EXPRESSION__ , __CONDITIONAL_EXPRESSION__ , __LOGICAL_OR_EXPRESSION__ , __LOGICAL_AND_EXPRESSION__ , __INCLUSIVE_OR_EXPRESSION__ , __EXCLUSIVE_OR_EXPRESSION__ , __AND_EXPRESSION__ ,
 __EQUALITY_EXPRESSION__ , __RELATIONAL_EXPRESSION__ , __ASSIGNMENT_OPERATOR__ , __CONSTANT_EXPRESSION__ , __DECLARATION__ , __DECLARATION_SPECIFIERS__ , __STATIC_ASSERT_DECLARATION__ , __INIT_DECLARATOR_LIST__ ,
 __TYPE_SPECIFIER__ , __TYPE_QUALIFIER__ , __STORAGE_CLASS_SPECIFIER__ , __FUNCTION_SPECIFIER__ , __ALIGNMENT_SPECIFIER__ , __INIT_DECLARATOR__ , __DECLARATOR__ , __INITIALIZER__ ,
 __ATOMIC_TYPE_SPECIFIER__ , __STRUCT_OR_UNION_SPECIFIER__ , __ENUM_SPECIFIER__ , __TYPEDEF_NAME__ , __STRUCT_DECLARATION_LIST__ , __STRUCT_OR_UNION__ , __STRUCT_DECLARATION__ , __SPECIFIER_QUALIFIER_LIST__ ,
 __ENUMERATOR_LIST__ , __STRUCT_DECLARATOR_LIST__ , __STRUCT_DECLARATOR__ , __ENUMERATOR__ ,  __POINTER__ , __DIRECT_DECLARATOR__ , __TYPE_QUALIFIER_LIST__ ,
 __PARAMETER_TYPE_LIST__ , __IDENTIFIER_LIST__ , __PARAMETER_LIST__ , __PARAMETER_DECLARATION__ , __ABSTRACT_DECLARATOR__ , __DIRECT_ABSTRACT_DECLARATOR__ , __DESIGNATION__ , __DESIGNATOR_LIST__ ,
 __DESIGNATOR__ , __STATEMENT__ , __LABELED_STATEMENT__ , __COMPOUND_STATEMENT__ , __EXPRESSION_STATEMENT__ , __SELECTION_STATEMENT__ , __ITERATION_STATEMENT__ , __JUMP_STATEMENT__ ,
 __BLOCK_ITEM_LIST__ , __BLOCK_ITEM__ , __TRANSLATION_UNIT__ , __EXTERNAL_DECLARATION__ , __FUNCTION_DEFINITION__ , __DECLARATION_LIST__, __DECLARATION_PREFIX__ 

};

multimap<int, vector<int>> C_productions = {

	{__PRIMARY_EXPRESSION__, {__IDENTIFIER__}},
	{__PRIMARY_EXPRESSION__, {__CONSTANT__}},
	{__PRIMARY_EXPRESSION__, {__STRING_LITERAL__}},
	{__PRIMARY_EXPRESSION__, {__LEFT_PAREN__, __EXPRESSION__, __RIGHT_PAREN__}},
	{__PRIMARY_EXPRESSION__, {__GENERIC_SELECTION__}},

	{__CONSTANT__, {__INT_CONST__}},
	{__CONSTANT__, {__FP_CONST__}},
	{__CONSTANT__, {__CHAR_CONST__}},
	//{__CONSTANT__, {__ENUMERATION_CONSTANT__}},
	
	//REPLACED ENUMERATION CONSTANT WITH IDENTIFIER

	/* make enum_constant a terminal instead?
	{__ENUMERATION_CONSTANT__, {__IDENTIFIER__} },
	*/

	{__GENERIC_SELECTION__, {__GENERIC__, __LEFT_PAREN__, __ASSIGNMENT_EXPRESSION__, __COMMA__, __GENERIC_ASSOC_LIST__, __RIGHT_PAREN__}},

	{__GENERIC_ASSOC_LIST__, {__GENERIC_ASSOCIATION__}},
	{__GENERIC_ASSOC_LIST__, {__GENERIC_ASSOC_LIST__, __COMMA__, __GENERIC_ASSOCIATION__}},

	{__GENERIC_ASSOCIATION__, {__TYPE_NAME__, __COLON__, __ASSIGNMENT_EXPRESSION__}},
	{__GENERIC_ASSOCIATION__, { __DEFAULT__, __COLON__, __ASSIGNMENT_EXPRESSION__ }},

	{ __POSTFIX_EXPRESSION__, {__PRIMARY_EXPRESSION__} },
	{ __POSTFIX_EXPRESSION__, {__POSTFIX_EXPRESSION__, __LEFT_BRACKET__, __EXPRESSION__, __RIGHT_BRACKET__} },
	{ __POSTFIX_EXPRESSION__, {__POSTFIX_EXPRESSION__,__LEFT_PAREN__, __RIGHT_PAREN__} },
	{ __POSTFIX_EXPRESSION__, {__POSTFIX_EXPRESSION__,__LEFT_PAREN__, __ARGUMENT_EXPRESSION_LIST__, __RIGHT_PAREN__} },
	{ __POSTFIX_EXPRESSION__, {__POSTFIX_EXPRESSION__, __PERIOD__, __IDENTIFIER__} },
	{ __POSTFIX_EXPRESSION__, {__POSTFIX_EXPRESSION__, __ARROW__, __IDENTIFIER__} },
	{ __POSTFIX_EXPRESSION__, {__POSTFIX_EXPRESSION__, __PLUS_PLUS__} },
	{ __POSTFIX_EXPRESSION__, {__POSTFIX_EXPRESSION__, __MINUS_MINUS__} },
	{ __POSTFIX_EXPRESSION__, {__LEFT_PAREN__, __TYPE_NAME__, __RIGHT_PAREN__, __LEFT_BRACE__, __INITIALIZER_LIST__, __RIGHT_BRACE__} },
	{ __POSTFIX_EXPRESSION__, {__LEFT_PAREN__, __TYPE_NAME__, __RIGHT_PAREN__, __LEFT_BRACE__, __INITIALIZER_LIST__, __COMMA__, __RIGHT_BRACE__} },

	{ __ARGUMENT_EXPRESSION_LIST__, {__ASSIGNMENT_EXPRESSION__} },
	{ __ARGUMENT_EXPRESSION_LIST__, {__ARGUMENT_EXPRESSION_LIST__, __COMMA__, __ASSIGNMENT_EXPRESSION__} },

	{ __UNARY_EXPRESSION__, {__POSTFIX_EXPRESSION__} },
	{ __UNARY_EXPRESSION__, {__PLUS_PLUS__, __UNARY_EXPRESSION__} },
	{ __UNARY_EXPRESSION__, {__MINUS_MINUS__, __UNARY_EXPRESSION__} },
	{ __UNARY_EXPRESSION__,{__UNARY_OPERATOR__, __CAST_EXPRESSION__} },
	{ __UNARY_EXPRESSION__, {__SIZEOF__, __UNARY_EXPRESSION__} },
	{ __UNARY_EXPRESSION__, {__SIZEOF__, __LEFT_PAREN__, __TYPE_NAME__, __RIGHT_PAREN__} },
	{ __UNARY_EXPRESSION__, {__ALIGN_OF__, __LEFT_PAREN__, __TYPE_NAME__, __RIGHT_PAREN__} },

	{ __UNARY_OPERATOR__, {__PLUS__} },
	{ __UNARY_OPERATOR__, {__MINUS__} },
	{ __UNARY_OPERATOR__, {__TILDE__} },
	{ __UNARY_OPERATOR__, {__NOT__} },
	{ __UNARY_OPERATOR__, {__AND__} },
	{ __UNARY_OPERATOR__, {__ASTERISK__} },

	{ __CAST_EXPRESSION__, {__UNARY_EXPRESSION__} },
	{ __CAST_EXPRESSION__, {__LEFT_PAREN__, __TYPE_NAME__, __RIGHT_PAREN__, __CAST_EXPRESSION__} },

	{ __MULTIPLICATIVE_EXPRESSION__, {__CAST_EXPRESSION__} },
	{ __MULTIPLICATIVE_EXPRESSION__, {__MULTIPLICATIVE_EXPRESSION__ , __ASTERISK__, __CAST_EXPRESSION__ } },
	{ __MULTIPLICATIVE_EXPRESSION__, {__MULTIPLICATIVE_EXPRESSION__ , __SLASH__, __CAST_EXPRESSION__} },
	{ __MULTIPLICATIVE_EXPRESSION__, {__MULTIPLICATIVE_EXPRESSION__, __PERCENT__,  __CAST_EXPRESSION__} },

	{ __ADDITIVE_EXPRESSION__, {__MULTIPLICATIVE_EXPRESSION__} },
	{ __ADDITIVE_EXPRESSION__, {__ADDITIVE_EXPRESSION__ , __PLUS__, __MULTIPLICATIVE_EXPRESSION__} },
	{ __ADDITIVE_EXPRESSION__, {__ADDITIVE_EXPRESSION__ , __MINUS__, __MULTIPLICATIVE_EXPRESSION__} },

	{ __SHIFT_EXPRESSION__, {__ADDITIVE_EXPRESSION__} },
	{ __SHIFT_EXPRESSION__, { __SHIFT_EXPRESSION__ , __LEFT_SHIFT__,__ADDITIVE_EXPRESSION__} },
	{ __SHIFT_EXPRESSION__, {__SHIFT_EXPRESSION__ , __RIGHT_SHIFT__, __ADDITIVE_EXPRESSION__ } },

	{ __RELATIONAL_EXPRESSION__, {__SHIFT_EXPRESSION__} },
	{ __RELATIONAL_EXPRESSION__, {__RELATIONAL_EXPRESSION__, __LESS_THAN__, __SHIFT_EXPRESSION__} },
	{ __RELATIONAL_EXPRESSION__, {__RELATIONAL_EXPRESSION__, __GREATER_THAN__, __SHIFT_EXPRESSION__} },
	{ __RELATIONAL_EXPRESSION__, {__RELATIONAL_EXPRESSION__, __LEQ__, __SHIFT_EXPRESSION__} },
	{ __RELATIONAL_EXPRESSION__, {__RELATIONAL_EXPRESSION__, __GEQ__, __SHIFT_EXPRESSION__} },

	{ __EQUALITY_EXPRESSION__, {__RELATIONAL_EXPRESSION__} },
	{ __EQUALITY_EXPRESSION__, {__EQUALITY_EXPRESSION__, __EQUAL_EQUAL__,  __RELATIONAL_EXPRESSION__ } },
	{ __EQUALITY_EXPRESSION__, {__EQUALITY_EXPRESSION__, __NOT_EQUAL__, __RELATIONAL_EXPRESSION__} },

	{ __AND_EXPRESSION__, {__EQUALITY_EXPRESSION__} },
	{ __AND_EXPRESSION__, {__AND_EXPRESSION__,  __AND__, __EQUALITY_EXPRESSION__} },

	{ __EXCLUSIVE_OR_EXPRESSION__, {__AND_EXPRESSION__} },
	{ __EXCLUSIVE_OR_EXPRESSION__, { __EXCLUSIVE_OR_EXPRESSION__, __EXCLUSIVE_OR__, __AND_EXPRESSION__ } },

	{ __INCLUSIVE_OR_EXPRESSION__, {__EXCLUSIVE_OR_EXPRESSION__} },
	{ __INCLUSIVE_OR_EXPRESSION__, {__INCLUSIVE_OR_EXPRESSION__, __INCLUSIVE_OR__, __EXCLUSIVE_OR_EXPRESSION__ } },

	{ __LOGICAL_AND_EXPRESSION__, {__INCLUSIVE_OR_EXPRESSION__} },
	{ __LOGICAL_AND_EXPRESSION__, { __LOGICAL_AND_EXPRESSION__, __AND_AND__, __INCLUSIVE_OR_EXPRESSION__} },

	{ __LOGICAL_OR_EXPRESSION__, {__LOGICAL_AND_EXPRESSION__} },
	{ __LOGICAL_OR_EXPRESSION__, {__LOGICAL_OR_EXPRESSION__, __OR__, __LOGICAL_AND_EXPRESSION__} },

	{ __CONDITIONAL_EXPRESSION__, {__LOGICAL_OR_EXPRESSION__} },
	{ __CONDITIONAL_EXPRESSION__, {__LOGICAL_OR_EXPRESSION__, __QUESTION_MARK__, __EXPRESSION__, __COLON__, __CONDITIONAL_EXPRESSION__} },

	{ __ASSIGNMENT_EXPRESSION__, {__CONDITIONAL_EXPRESSION__} },
	{ __ASSIGNMENT_EXPRESSION__, {__UNARY_EXPRESSION__, __ASSIGNMENT_OPERATOR__, __ASSIGNMENT_EXPRESSION__} },

	{ __ASSIGNMENT_OPERATOR__, {__EQUAL__} },
	{ __ASSIGNMENT_OPERATOR__, {__ASTERISK_EQUAL__} },
	{ __ASSIGNMENT_OPERATOR__, {__SLASH_EQUAL__} },
	{ __ASSIGNMENT_OPERATOR__, {__PERCENT_EQUAL__} },
	{ __ASSIGNMENT_OPERATOR__, {__PLUS_EQUAL__} },
	{ __ASSIGNMENT_OPERATOR__, {__MINUS_EQUAL__} },
	{ __ASSIGNMENT_OPERATOR__, {__SHIFT_LEFT_EQUAL__} },
	{ __ASSIGNMENT_OPERATOR__, {__SHIFT_RIGHT_EQUAL__} },
	{ __ASSIGNMENT_OPERATOR__, {__AND_EQUAL__} },
	{ __ASSIGNMENT_OPERATOR__, {__CARET_EQUAL__} },
	{ __ASSIGNMENT_OPERATOR__, {__BAR_EQUAL__} },

	{ __EXPRESSION__, {__ASSIGNMENT_EXPRESSION__} },
	{ __EXPRESSION__, {__EXPRESSION__, __COMMA__, __ASSIGNMENT_EXPRESSION__} },

	{ __CONSTANT_EXPRESSION__, {__CONDITIONAL_EXPRESSION__} },

	{ __DECLARATION__, {__DECLARATION_SPECIFIERS__, __SEMICOLON__} },
		//{__DECLARATION__, {__DECLARATION_SPECIFIERS__, __INIT_DECLARATOR_LIST__, __SEMICOLON__}},
	{ __DECLARATION__, {__DECLARATION_PREFIX__, __SEMICOLON__} },
	{ __DECLARATION__, {__STATIC_ASSERT_DECLARATION__} },

		//for easier declaration processing in parser
	{ __DECLARATION_PREFIX__, {__DECLARATION_SPECIFIERS__, __INIT_DECLARATOR_LIST__} },

	{__DECLARATION_SPECIFIERS__, {__STORAGE_CLASS_SPECIFIER__ ,__DECLARATION_SPECIFIERS__}},
	{__DECLARATION_SPECIFIERS__, { __TYPE_SPECIFIER__,__DECLARATION_SPECIFIERS__ }},
	{__DECLARATION_SPECIFIERS__, { __TYPE_QUALIFIER__ ,__DECLARATION_SPECIFIERS__}},
	{__DECLARATION_SPECIFIERS__, { __FUNCTION_SPECIFIER__,__DECLARATION_SPECIFIERS__ }},
	{__DECLARATION_SPECIFIERS__, { __ALIGNMENT_SPECIFIER__ ,__DECLARATION_SPECIFIERS__}},

	{__DECLARATION_SPECIFIERS__, {__STORAGE_CLASS_SPECIFIER__}},
	{__DECLARATION_SPECIFIERS__, {__TYPE_SPECIFIER__}},
	{__DECLARATION_SPECIFIERS__, {__TYPE_QUALIFIER__}},
	{__DECLARATION_SPECIFIERS__, {__FUNCTION_SPECIFIER__}},
	{__DECLARATION_SPECIFIERS__, {__ALIGNMENT_SPECIFIER__}},

	{__INIT_DECLARATOR_LIST__, {__INIT_DECLARATOR__}},
	{__INIT_DECLARATOR_LIST__, {__INIT_DECLARATOR_LIST__, __COMMA__, __INIT_DECLARATOR__}},

	{__INIT_DECLARATOR__, {__DECLARATOR__}},
	{__INIT_DECLARATOR__, {__DECLARATOR__, __EQUAL__, __INITIALIZER__}},

	{__STORAGE_CLASS_SPECIFIER__, {__TYPEDEF__}},
	{ __STORAGE_CLASS_SPECIFIER__, {__EXTERN__} },
	{ __STORAGE_CLASS_SPECIFIER__, {__STATIC__} },
	{ __STORAGE_CLASS_SPECIFIER__, {__THREAD_LOCAL__} },
	{ __STORAGE_CLASS_SPECIFIER__, {__AUTO__} },
	{ __STORAGE_CLASS_SPECIFIER__, {__REGISTER__} },

	{ __TYPE_SPECIFIER__, {__VOID__}},
	{ __TYPE_SPECIFIER__, {__CHAR__} },
	{ __TYPE_SPECIFIER__, {__SHORT__} },
	{ __TYPE_SPECIFIER__, {__INT__} },
	{ __TYPE_SPECIFIER__, {__LONG__} },
	{ __TYPE_SPECIFIER__, {__FLOAT__} },
	{ __TYPE_SPECIFIER__, {__DOUBLE__} },
	{ __TYPE_SPECIFIER__, {__SIGNED__} },
	{ __TYPE_SPECIFIER__, {__UNSIGNED__} },
	{ __TYPE_SPECIFIER__, {__BOOL__} },
	{ __TYPE_SPECIFIER__, {__COMPLEX__} },
	{ __TYPE_SPECIFIER__, {__ATOMIC_TYPE_SPECIFIER__} },
	{ __TYPE_SPECIFIER__, {__STRUCT_OR_UNION_SPECIFIER__} },
	{ __TYPE_SPECIFIER__, {__ENUM_SPECIFIER__} },
	{ __TYPE_SPECIFIER__, {__TYPEDEF_NAME__} },

	{__STRUCT_OR_UNION_SPECIFIER__, {__STRUCT_OR_UNION__, __LEFT_BRACE__, __STRUCT_DECLARATION_LIST__, __RIGHT_BRACE__}},
	{ __STRUCT_OR_UNION_SPECIFIER__, {__STRUCT_OR_UNION__, __IDENTIFIER__, __LEFT_BRACE__, __STRUCT_DECLARATION_LIST__, __RIGHT_BRACE__} },
	{ __STRUCT_OR_UNION_SPECIFIER__, {__STRUCT_OR_UNION__, __IDENTIFIER__}},

	{ __STRUCT_OR_UNION__, {__STRUCT__}},
	{ __STRUCT_OR_UNION__, {__UNION__}},

	{ __STRUCT_DECLARATION_LIST__, {__STRUCT_DECLARATION__}},
	{ __STRUCT_DECLARATION_LIST__, {__STRUCT_DECLARATION_LIST__, __STRUCT_DECLARATION__} },

	{ __STRUCT_DECLARATION__, {__SPECIFIER_QUALIFIER_LIST__, __SEMICOLON__}},
	{ __STRUCT_DECLARATION__, {__SPECIFIER_QUALIFIER_LIST__, __STRUCT_DECLARATOR_LIST__, __SEMICOLON__} },
	{ __STRUCT_DECLARATION__, {__STATIC_ASSERT_DECLARATION__} },

	{ __SPECIFIER_QUALIFIER_LIST__, {__TYPE_SPECIFIER__, __SPECIFIER_QUALIFIER_LIST__}},
	{ __SPECIFIER_QUALIFIER_LIST__, {__TYPE_QUALIFIER__, __SPECIFIER_QUALIFIER_LIST__, } },
	{ __SPECIFIER_QUALIFIER_LIST__, {__ALIGNMENT_SPECIFIER__, __SPECIFIER_QUALIFIER_LIST__, } },


	{ __SPECIFIER_QUALIFIER_LIST__, {__TYPE_SPECIFIER__} },
	{ __SPECIFIER_QUALIFIER_LIST__, {__TYPE_QUALIFIER__} },
	{ __SPECIFIER_QUALIFIER_LIST__, {__ALIGNMENT_SPECIFIER__}},

	{ __STRUCT_DECLARATOR_LIST__, {__STRUCT_DECLARATOR__}},
	{ __STRUCT_DECLARATOR_LIST__, {__STRUCT_DECLARATOR_LIST__, __COMMA__, __STRUCT_DECLARATOR__} },

	{ __STRUCT_DECLARATOR__, {__DECLARATOR__}},
	{ __STRUCT_DECLARATOR__, {__DECLARATOR__, __COLON__, __CONSTANT_EXPRESSION__} },
	{ __STRUCT_DECLARATOR__, {__COLON__, __CONSTANT_EXPRESSION__} },

	{ __ENUM_SPECIFIER__, {__ENUM__, __IDENTIFIER__, __LEFT_BRACE__, __ENUMERATOR_LIST__, __RIGHT_BRACE__}},
	{ __ENUM_SPECIFIER__, {__ENUM__,  __LEFT_BRACE__, __ENUMERATOR_LIST__, __RIGHT_BRACE__} },
	{ __ENUM_SPECIFIER__, {__ENUM__, __IDENTIFIER__, __LEFT_BRACE__, __ENUMERATOR_LIST__, __COMMA__, __RIGHT_BRACE__} },
	{ __ENUM_SPECIFIER__, {__ENUM__,  __LEFT_BRACE__, __ENUMERATOR_LIST__, __COMMA__, __RIGHT_BRACE__} },
	{ __ENUM_SPECIFIER__, {__ENUM__, __IDENTIFIER__} },

	{ __ENUMERATOR_LIST__, {__ENUMERATOR__}},
	{ __ENUMERATOR_LIST__, {__ENUMERATOR_LIST__, __COMMA__, __ENUMERATOR__}},

		/*
	{ __ENUMERATOR__, {__ENUMERATION_CONSTANT__} },
	{ __ENUMERATOR__, {__ENUMERATION_CONSTANT__, __EQUAL__, __CONSTANT_EXPRESSION__}},
	*/
	
	//replace with: 
	{ __ENUMERATOR__, {__IDENTIFIER__} },
	{ __ENUMERATOR__, {__IDENTIFIER__, __EQUAL__, __CONSTANT_EXPRESSION__} },


	{ __ATOMIC_TYPE_SPECIFIER__, {__ATOMIC__, __LEFT_PAREN__, __TYPE_NAME__, __RIGHT_PAREN__}},

	{ __TYPE_QUALIFIER__, {__CONST__} },
	{ __TYPE_QUALIFIER__, {__RESTRICT__} },
	{ __TYPE_QUALIFIER__, {__VOLATILE__} },
	{ __TYPE_QUALIFIER__, {__ATOMIC__} },

	{ __FUNCTION_SPECIFIER__, {__INLINE__} },
	{ __FUNCTION_SPECIFIER__, {__NO_RETURN__} },

	{ __ALIGNMENT_SPECIFIER__, {__ALIGN_AS__, __LEFT_PAREN__, __TYPE_NAME__, __RIGHT_PAREN__} },
	{ __ALIGNMENT_SPECIFIER__, { __ALIGN_AS__, __LEFT_PAREN__, __CONSTANT_EXPRESSION__, __RIGHT_PAREN__}},

	{ __DECLARATOR__, {__POINTER__, __DIRECT_DECLARATOR__}},
	{ __DECLARATOR__, {__DIRECT_DECLARATOR__} },

	{ __DIRECT_DECLARATOR__, {__IDENTIFIER__} },
	{ __DIRECT_DECLARATOR__, {__LEFT_PAREN__, __DECLARATOR__, __RIGHT_PAREN__} },

	{ __DIRECT_DECLARATOR__, {__DIRECT_DECLARATOR__, __LEFT_BRACKET__, __TYPE_QUALIFIER_LIST__, __ASSIGNMENT_EXPRESSION__ , __RIGHT_BRACKET__} },
	{ __DIRECT_DECLARATOR__, {__DIRECT_DECLARATOR__, __LEFT_BRACKET__, __TYPE_QUALIFIER_LIST__, __RIGHT_BRACKET__} },
	{ __DIRECT_DECLARATOR__, {__DIRECT_DECLARATOR__, __LEFT_BRACKET__, __ASSIGNMENT_EXPRESSION__ , __RIGHT_BRACKET__} },
	{ __DIRECT_DECLARATOR__, {__DIRECT_DECLARATOR__, __LEFT_BRACKET__, __RIGHT_BRACKET__} },

	{ __DIRECT_DECLARATOR__, {__DIRECT_DECLARATOR__, __LEFT_BRACKET__, __STATIC__, __TYPE_QUALIFIER_LIST__, __ASSIGNMENT_EXPRESSION__ , __RIGHT_BRACKET__} },
	{ __DIRECT_DECLARATOR__, {__DIRECT_DECLARATOR__, __LEFT_BRACKET__, __STATIC__, __ASSIGNMENT_EXPRESSION__ , __RIGHT_BRACKET__} },

	{ __DIRECT_DECLARATOR__, {__DIRECT_DECLARATOR__, __LEFT_BRACKET__, __TYPE_QUALIFIER_LIST__, __STATIC__, __ASSIGNMENT_EXPRESSION__ , __RIGHT_BRACKET__} },

	{ __DIRECT_DECLARATOR__, {__DIRECT_DECLARATOR__, __LEFT_BRACKET__, __TYPE_QUALIFIER_LIST__, __ASTERISK__ , __RIGHT_BRACKET__} },
	{ __DIRECT_DECLARATOR__, {__DIRECT_DECLARATOR__, __LEFT_BRACKET__, __ASTERISK__ , __RIGHT_BRACKET__} },

	{ __DIRECT_DECLARATOR__, {__DIRECT_DECLARATOR__, __LEFT_PAREN__, __PARAMETER_TYPE_LIST__, __RIGHT_PAREN__}},

	{ __DIRECT_DECLARATOR__, {__DIRECT_DECLARATOR__, __LEFT_PAREN__, __IDENTIFIER_LIST__, __RIGHT_PAREN__} },
	{ __DIRECT_DECLARATOR__, {__DIRECT_DECLARATOR__, __LEFT_PAREN__, __RIGHT_PAREN__} },

	{ __POINTER__, {__ASTERISK__, __TYPE_QUALIFIER_LIST__}},
	{ __POINTER__, {__ASTERISK__} },

	{ __POINTER__, {__ASTERISK__, __TYPE_QUALIFIER_LIST__, __POINTER__} },
	{ __POINTER__, {__ASTERISK__, __POINTER__} },

	{ __TYPE_QUALIFIER_LIST__, {__TYPE_QUALIFIER__}},
	{ __TYPE_QUALIFIER_LIST__, {__TYPE_QUALIFIER_LIST__, __TYPE_QUALIFIER__}},

	{ __PARAMETER_TYPE_LIST__, {__PARAMETER_LIST__}},
	{ __PARAMETER_TYPE_LIST__, {__PARAMETER_LIST__, __COMMA__, __ELLIPSIS__}},

	{ __PARAMETER_LIST__, {__PARAMETER_DECLARATION__}},
	{ __PARAMETER_LIST__, {__PARAMETER_LIST__, __COMMA__, __PARAMETER_DECLARATION__} },

	{ __PARAMETER_DECLARATION__, {__DECLARATION_SPECIFIERS__, __DECLARATOR__} },
	{ __PARAMETER_DECLARATION__, {__DECLARATION_SPECIFIERS__, __ABSTRACT_DECLARATOR__}},
	{ __PARAMETER_DECLARATION__, {__DECLARATION_SPECIFIERS__} },

	{ __IDENTIFIER_LIST__, {__IDENTIFIER__} },
	{ __IDENTIFIER_LIST__, {__IDENTIFIER_LIST__, __COMMA__, __IDENTIFIER__} },

	{ __TYPE_NAME__, {__SPECIFIER_QUALIFIER_LIST__, __ABSTRACT_DECLARATOR__} },
	{ __TYPE_NAME__, {__SPECIFIER_QUALIFIER_LIST__} },

	{ __ABSTRACT_DECLARATOR__, {__POINTER__}},
	{ __ABSTRACT_DECLARATOR__, {__POINTER__, __DIRECT_ABSTRACT_DECLARATOR__} },
	{ __ABSTRACT_DECLARATOR__, {__DIRECT_ABSTRACT_DECLARATOR__} },

	{ __DIRECT_ABSTRACT_DECLARATOR__, {__LEFT_PAREN__, __ABSTRACT_DECLARATOR__, __RIGHT_PAREN__}},

	{ __DIRECT_ABSTRACT_DECLARATOR__, {__DIRECT_ABSTRACT_DECLARATOR__, __LEFT_BRACKET__, __TYPE_QUALIFIER_LIST__, __ASSIGNMENT_EXPRESSION__, __RIGHT_BRACKET__}},
	{ __DIRECT_ABSTRACT_DECLARATOR__, {__LEFT_BRACKET__, __TYPE_QUALIFIER_LIST__, __ASSIGNMENT_EXPRESSION__, __RIGHT_BRACKET__} },
	{ __DIRECT_ABSTRACT_DECLARATOR__, { __DIRECT_ABSTRACT_DECLARATOR__, __LEFT_BRACKET__, __ASSIGNMENT_EXPRESSION__, __RIGHT_BRACKET__ }},
	{ __DIRECT_ABSTRACT_DECLARATOR__, { __DIRECT_ABSTRACT_DECLARATOR__, __LEFT_BRACKET__, __TYPE_QUALIFIER_LIST__,  __RIGHT_BRACKET__ }},
	{ __DIRECT_ABSTRACT_DECLARATOR__, { __LEFT_BRACKET__, __ASSIGNMENT_EXPRESSION__, __RIGHT_BRACKET__ }},
	{ __DIRECT_ABSTRACT_DECLARATOR__, { __DIRECT_ABSTRACT_DECLARATOR__, __LEFT_BRACKET__, __RIGHT_BRACKET__ }},
	{ __DIRECT_ABSTRACT_DECLARATOR__, { __LEFT_BRACKET__, __TYPE_QUALIFIER_LIST__,  __RIGHT_BRACKET__ }},
	{ __DIRECT_ABSTRACT_DECLARATOR__, {  __LEFT_BRACKET__, __RIGHT_BRACKET__ }},

	{ __DIRECT_ABSTRACT_DECLARATOR__, {  __DIRECT_ABSTRACT_DECLARATOR__, __LEFT_BRACKET__, __STATIC__, __TYPE_QUALIFIER_LIST__, __ASSIGNMENT_EXPRESSION__, __RIGHT_BRACKET__ } },
	{ __DIRECT_ABSTRACT_DECLARATOR__, {   __LEFT_BRACKET__, __STATIC__, __TYPE_QUALIFIER_LIST__, __ASSIGNMENT_EXPRESSION__, __RIGHT_BRACKET__ } },
	{ __DIRECT_ABSTRACT_DECLARATOR__, {  __DIRECT_ABSTRACT_DECLARATOR__, __LEFT_BRACKET__, __STATIC__, __ASSIGNMENT_EXPRESSION__, __RIGHT_BRACKET__ } },
	{ __DIRECT_ABSTRACT_DECLARATOR__, {  __LEFT_BRACKET__, __STATIC__, __ASSIGNMENT_EXPRESSION__, __RIGHT_BRACKET__ } },


	{ __DIRECT_ABSTRACT_DECLARATOR__, {  __DIRECT_ABSTRACT_DECLARATOR__, __LEFT_BRACKET__, __TYPE_QUALIFIER_LIST__,  __STATIC__, __ASSIGNMENT_EXPRESSION__, __RIGHT_BRACKET__ } },
	{ __DIRECT_ABSTRACT_DECLARATOR__, {  __LEFT_BRACKET__, __TYPE_QUALIFIER_LIST__,  __STATIC__, __ASSIGNMENT_EXPRESSION__, __RIGHT_BRACKET__ } },

	{ __DIRECT_ABSTRACT_DECLARATOR__, { __DIRECT_ABSTRACT_DECLARATOR__, __LEFT_BRACKET__, __ASTERISK__ , __RIGHT_BRACKET__} },
	{ __DIRECT_ABSTRACT_DECLARATOR__, {__LEFT_BRACKET__, __ASTERISK__ , __RIGHT_BRACKET__} },

	{ __DIRECT_ABSTRACT_DECLARATOR__, { __DIRECT_ABSTRACT_DECLARATOR__, __LEFT_PAREN__, __PARAMETER_TYPE_LIST__ , __RIGHT_PAREN__} },
	{ __DIRECT_ABSTRACT_DECLARATOR__, { __LEFT_PAREN__, __PARAMETER_TYPE_LIST__ , __RIGHT_PAREN__} },
	{ __DIRECT_ABSTRACT_DECLARATOR__, { __DIRECT_ABSTRACT_DECLARATOR__, __LEFT_PAREN__, __RIGHT_PAREN__} },
	{ __DIRECT_ABSTRACT_DECLARATOR__, { __LEFT_PAREN__, __RIGHT_PAREN__} },

	{__TYPEDEF_NAME__, {__TYPE_IDENTIFIER__}},

	{ __INITIALIZER__, {__ASSIGNMENT_EXPRESSION__}},
	{ __INITIALIZER__, {__LEFT_BRACE__, __INITIALIZER_LIST__, __RIGHT_BRACE__} },
	{ __INITIALIZER__, {__LEFT_BRACE__, __INITIALIZER_LIST__, __COMMA__, __RIGHT_BRACE__} },

	{ __INITIALIZER_LIST__, {__DESIGNATION__, __INITIALIZER__}},
	{ __INITIALIZER_LIST__, { __INITIALIZER__} },

	{ __INITIALIZER_LIST__, {__INITIALIZER_LIST__, __COMMA__, __DESIGNATION__, __INITIALIZER__} },
	{ __INITIALIZER_LIST__, {__INITIALIZER_LIST__, __COMMA__, __INITIALIZER__} },

	{__DESIGNATION__, {__DESIGNATOR_LIST__, __EQUAL__}},

	{ __DESIGNATOR_LIST__, {__DESIGNATOR__} },
	{ __DESIGNATOR_LIST__, {__DESIGNATOR_LIST__, __DESIGNATOR__} },

	{__DESIGNATOR__, {__LEFT_BRACKET__, __CONSTANT_EXPRESSION__, __RIGHT_BRACKET__}},
	{ __DESIGNATOR__, {__PERIOD__, __IDENTIFIER__} },

	{ __STATIC_ASSERT_DECLARATION__, {__STATIC_ASSERT__, __LEFT_PAREN__, __CONSTANT_EXPRESSION__, __COMMA__, __STRING_LITERAL__, __RIGHT_PAREN__, __SEMICOLON__} },

	{ __STATEMENT__, { __LABELED_STATEMENT__ }},
	{ __STATEMENT__, { __COMPOUND_STATEMENT__ } },
	{ __STATEMENT__, { __EXPRESSION_STATEMENT__ } },
	{ __STATEMENT__, { __SELECTION_STATEMENT__ } },
	{ __STATEMENT__, { __ITERATION_STATEMENT__ } },
	{ __STATEMENT__, { __JUMP_STATEMENT__ } },

	{ __LABELED_STATEMENT__, {__IDENTIFIER__, __COLON__, __STATEMENT__}},
	{ __LABELED_STATEMENT__, {__CASE__, __CONSTANT_EXPRESSION__, __COLON__, __STATEMENT__} },
	{ __LABELED_STATEMENT__, {__DEFAULT__, __COLON__, __STATEMENT__} },

	{ __COMPOUND_STATEMENT__, {__LEFT_BRACE__, __BLOCK_ITEM_LIST__, __RIGHT_BRACE__} },
	{ __COMPOUND_STATEMENT__, {__LEFT_BRACE__, __RIGHT_BRACE__} },

	{ __BLOCK_ITEM_LIST__, {__BLOCK_ITEM__}},
	{ __BLOCK_ITEM_LIST__, {__BLOCK_ITEM_LIST__, __BLOCK_ITEM__} },
		 
	{ __BLOCK_ITEM__, {__DECLARATION__}},
	{ __BLOCK_ITEM__, {__STATEMENT__}},

	{ __EXPRESSION_STATEMENT__, {__EXPRESSION__, __SEMICOLON__}},
	{ __EXPRESSION_STATEMENT__, {__SEMICOLON__} },

	{ __SELECTION_STATEMENT__, {__IF__, __LEFT_PAREN__, __EXPRESSION__, __RIGHT_PAREN__, __STATEMENT__}},
	{ __SELECTION_STATEMENT__, {__IF__, __LEFT_PAREN__, __EXPRESSION__, __RIGHT_PAREN__, __STATEMENT__, __ELSE__, __STATEMENT__} },
	{ __SELECTION_STATEMENT__, { __SWITCH__, __LEFT_PAREN__, __EXPRESSION__, __RIGHT_PAREN__, __STATEMENT__ }},

	{ __ITERATION_STATEMENT__, {__WHILE__, __LEFT_PAREN__, __EXPRESSION__, __RIGHT_PAREN__, __STATEMENT__ } },
	{ __ITERATION_STATEMENT__, {__DO__, __STATEMENT__, __WHILE__, __LEFT_PAREN__, __EXPRESSION__, __RIGHT_PAREN__, __SEMICOLON__ } },


	{ __ITERATION_STATEMENT__, {__FOR__, __LEFT_PAREN__, __EXPRESSION__, __SEMICOLON__, __EXPRESSION__, __SEMICOLON__, __EXPRESSION__, __RIGHT_PAREN__, __STATEMENT__} },
	{ __ITERATION_STATEMENT__, {__FOR__, __LEFT_PAREN__, __SEMICOLON__, __EXPRESSION__, __SEMICOLON__, __EXPRESSION__, __RIGHT_PAREN__, __STATEMENT__} },
	{ __ITERATION_STATEMENT__, {__FOR__, __LEFT_PAREN__, __EXPRESSION__, __SEMICOLON__, __SEMICOLON__, __EXPRESSION__, __RIGHT_PAREN__, __STATEMENT__} },
	{ __ITERATION_STATEMENT__, {__FOR__, __LEFT_PAREN__, __EXPRESSION__, __SEMICOLON__, __EXPRESSION__, __SEMICOLON__, __RIGHT_PAREN__, __STATEMENT__} },
	{ __ITERATION_STATEMENT__, {__FOR__, __LEFT_PAREN__,  __SEMICOLON__, __SEMICOLON__, __EXPRESSION__, __RIGHT_PAREN__, __STATEMENT__} },
	{ __ITERATION_STATEMENT__, {__FOR__, __LEFT_PAREN__, __EXPRESSION__, __SEMICOLON__, __SEMICOLON__, __RIGHT_PAREN__, __STATEMENT__} },
	{ __ITERATION_STATEMENT__, {__FOR__, __LEFT_PAREN__, __SEMICOLON__, __EXPRESSION__, __SEMICOLON__, __RIGHT_PAREN__, __STATEMENT__} },
	{ __ITERATION_STATEMENT__, {__FOR__, __LEFT_PAREN__,  __SEMICOLON__, __SEMICOLON__,  __RIGHT_PAREN__, __STATEMENT__} },

	{ __ITERATION_STATEMENT__, {__FOR__, __LEFT_PAREN__, __DECLARATION__, __EXPRESSION__, __SEMICOLON__, __EXPRESSION__, __RIGHT_PAREN__, __STATEMENT__} },
	{ __ITERATION_STATEMENT__, {__FOR__, __LEFT_PAREN__, __DECLARATION__, __SEMICOLON__, __EXPRESSION__, __RIGHT_PAREN__, __STATEMENT__} },
	{ __ITERATION_STATEMENT__, {__FOR__, __LEFT_PAREN__, __DECLARATION__, __EXPRESSION__, __SEMICOLON__,  __RIGHT_PAREN__, __STATEMENT__} },
	{ __ITERATION_STATEMENT__, {__FOR__, __LEFT_PAREN__, __DECLARATION__, __SEMICOLON__, __RIGHT_PAREN__, __STATEMENT__} },

	{ __JUMP_STATEMENT__, {__GOTO__, __IDENTIFIER__, __SEMICOLON__} },
	{ __JUMP_STATEMENT__, {__CONTINUE__, __SEMICOLON__} },
	{ __JUMP_STATEMENT__, {__BREAK__, __SEMICOLON__} },

	{ __JUMP_STATEMENT__, {__RETURN__, __EXPRESSION__, __SEMICOLON__} },
	{ __JUMP_STATEMENT__, {__RETURN__, __SEMICOLON__} },

	{ __TRANSLATION_UNIT__, {__EXTERNAL_DECLARATION__} },
	{ __TRANSLATION_UNIT__, {__TRANSLATION_UNIT__, __EXTERNAL_DECLARATION__} },

	{ __EXTERNAL_DECLARATION__, {__FUNCTION_DEFINITION__}},
	{ __EXTERNAL_DECLARATION__, {__DECLARATION__}},

	{ __FUNCTION_DEFINITION__, {__DECLARATION_SPECIFIERS__, __DECLARATOR__, __DECLARATION_LIST__, __COMPOUND_STATEMENT__}},
	{ __FUNCTION_DEFINITION__, {__DECLARATION_SPECIFIERS__, __DECLARATOR__, __COMPOUND_STATEMENT__} },

	{ __DECLARATION_LIST__, {__DECLARATION__}},
	{ __DECLARATION_LIST__, {__DECLARATION_LIST__, __DECLARATION__}},
};

int C_start = __TRANSLATION_UNIT__;

ContextFreeGrammar C_grammar(C_terminals, C_nonterminals, C_productions, C_start);

/*
#undef __IDENTIFIER__ 
#undef __TYPE_IDENTIFIER__
#undef __INT_CONST__ 
#undef __FP_CONST__
#undef __CHAR_CONST__ 
#undef __STRING_LITERAL__ 
#undef __LEFT_BRACKET__
#undef __RIGHT_BRACKET__ 
#undef __LEFT_PAREN__ 
#undef __RIGHT_PAREN__
#undef __LEFT_BRACE__ 
#undef __RIGHT_BRACE__ 
#undef __PERIOD__ 
#undef __ARROW__ 
#undef __PLUS_PLUS__ 
#undef __MINUS_MINUS__ 
#undef __QUESTION_MARK__ 
#undef __COLON__
#undef __OR__
#undef __AND_AND__ 
#undef __INCLUSIVE_OR__ 
#undef __EXCLUSIVE_OR__
#undef __AND__ 
#undef __EQUAL_EQUAL__
#undef __NOT_EQUAL__ 
#undef __LESS_THAN__ 
#undef __GREATER_THAN__ 
#undef __LEQ__ 
#undef __GEQ__ 
#undef __LEFT_SHIFT__ 
#undef __RIGHT_SHIFT__ 
#undef __PLUS__ 
#undef __MINUS__ 
#undef __ASTERISK__ 
#undef __SLASH__ 
#undef __PERCENT__ 
#undef __TILDE__ 
#undef __NOT__ 
#undef __SEMICOLON__ 
#undef __ELLIPSIS__ 
#undef __EQUAL__ 
#undef __ASTERISK_EQUAL__ 
#undef __SLASH_EQUAL__ 
#undef __PERCENT_EQUAL__ 
#undef __PLUS_EQUAL__ 
#undef __MINUS_EQUAL__ 
#undef __SHIFT_LEFT_EQUAL__ 
#undef __SHIFT_RIGHT_EQUAL__ 
#undef __AND_EQUAL__ 
#undef __CARET_EQUAL__ 
#undef __BAR_EQUAL__ 
#undef __COMMA__ 
#undef __HASHTAG__
#undef __HASHTAG_HASHTAG__ 
#undef __AUTO__ 
#undef __BREAK__ 
#undef __CASE__ 
#undef __CHAR__ 
#undef __CONST__ 
#undef __CONTINUE__ 
#undef __DEFAULT__
#undef __DO__
#undef __DOUBLE__ 
#undef __ELSE__
#undef __ENUM__ 
#undef __EXTERN__
#undef __FLOAT__ 
#undef __FOR__
#undef __GOTO__ 
#undef __IF__
#undef __INLINE__ 
#undef __INT__ 
#undef __LONG__ 
#undef __REGISTER__ 
#undef __RESTRICT__ 
#undef __RETURN__
#undef __SHORT__ 
#undef __SIGNED__
#undef __SIZEOF__ 
#undef __STATIC__ 
#undef __STRUCT__ 
#undef __SWITCH__ 
#undef __TYPEDEF__ 
#undef __UNION__
#undef __UNSIGNED__ 
#undef __VOID__
#undef __VOLATILE__ 
#undef __WHILE__ 
#undef __ALIGN_AS__ 
#undef __ALIGN_OF__ 
#undef __ATOMIC__ 
#undef __BOOL__ 
#undef __COMPLEX__
#undef __GENERIC__ 
#undef __IMAG__ 
#undef __NO_RETURN__ 
#undef __STATIC_ASSERT__ 
#undef __THREAD_LOCAL__ 


#undef __MAX__ 

#undef __PRIMARY_EXPRESSION__ 
#undef __EXPRESSION__  
#undef __GENERIC_SELECTION__  
#undef __CONSTANT__  
#undef __GENERIC_SELECTION__  
#undef __ASSIGNMENT_EXPRESSION__  
#undef __GENERIC_ASSOC_LIST__  
#undef __GENERIC_ASSOCIATION__  
#undef __TYPE_NAME__  
#undef __POSTFIX_EXPRESSION__  
#undef __ARGUMENT_EXPRESSION_LIST__  
#undef __INITIALIZER_LIST__  
#undef __UNARY_EXPRESSION__  
#undef __UNARY_OPERATOR__  
#undef __CAST_EXPRESSION__  
#undef __MULTIPLICATIVE_EXPRESSION__  
#undef __ADDITIVE_EXPRESSION__  
#undef __SHIFT_EXPRESSION__  
#undef __CONDITIONAL_EXPRESSION__  
#undef __LOGICAL_OR_EXPRESSION__  
#undef __LOGICAL_AND_EXPRESSION__  
#undef __INCLUSIVE_OR_EXPRESSION__  
#undef __EXCLUSIVE_OR_EXPRESSION__  
#undef __AND_EXPRESSION__  
#undef __EQUALITY_EXPRESSION__  
#undef __RELATIONAL_EXPRESSION__  
#undef __ASSIGNMENT_OPERATOR__  
#undef __CONSTANT_EXPRESSION__  
#undef __DECLARATION__  
#undef __DECLARATION_SPECIFIERS__  
#undef __STATIC_ASSERT_DECLARATION__  
#undef __INIT_DECLARATOR_LIST__  
#undef __TYPE_SPECIFIER__  
#undef __TYPE_QUALIFIER__  
#undef __STORAGE_CLASS_SPECIFIER__  
#undef __FUNCTION_SPECIFIER__  
#undef __ALIGNMENT_SPECIFIER__ 
#undef __INIT_DECLARATOR__  
#undef __DECLARATOR__  
#undef __INITIALIZER__ 
#undef __ATOMIC_TYPE_SPECIFIER__  
#undef __STRUCT_OR_UNION_SPECIFIER__  
#undef __ENUM_SPECIFIER__  
#undef __TYPEDEF_NAME__  
#undef __STRUCT_DECLARATION_LIST__  
#undef __STRUCT_OR_UNION__  
#undef __STRUCT_DECLARATION__  
#undef __SPECIFIER_QUALIFIER_LIST__  
#undef __ENUMERATOR_LIST__  
#undef __STRUCT_DECLARATOR_LIST__  
#undef __STRUCT_DECLARATOR__  
#undef __ENUMERATOR__  
//#undef __ENUMERATION_CONSTANT__  
#undef __POINTER__  
#undef __DIRECT_DECLARATOR__ 
#undef __TYPE_QUALIFIER_LIST__  
#undef __PARAMETER_TYPE_LIST__  
#undef __IDENTIFIER_LIST__  
#undef __PARAMETER_LIST__  
#undef __PARAMETER_DECLARATION__  
#undef __ABSTRACT_DECLARATOR__  
#undef __DIRECT_ABSTRACT_DECLARATOR__  
#undef __DESIGNATION__  
#undef __DESIGNATOR_LIST__  
#undef __DESIGNATOR__  
#undef __STATEMENT__  
#undef __LABELED_STATEMENT__  
#undef __COMPOUND_STATEMENT__  
#undef __EXPRESSION_STATEMENT__  
#undef __SELECTION_STATEMENT__ 
#undef __ITERATION_STATEMENT__  
#undef __JUMP_STATEMENT__  
#undef __BLOCK_ITEM_LIST__  
#undef __BLOCK_ITEM__  
#undef __TRANSLATION_UNIT__  
#undef __EXTERNAL_DECLARATION__  
#undef __FUNCTION_DEFINITION__  
#undef __DECLARATION_LIST__  


*/





